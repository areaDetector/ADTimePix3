# Author: K. Gofron
# Date: 2022/6/4

##################################################################
# Define all of your PV records here in the following form:
#
# record(RECORD_TYPE, "$(P)$(R)PVName"){
#   field(DTYP, "data type")
#   field(INP/OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))PV_NAME")
#   field(VAL, "value")
#   field(SCAN, "I/O Intr")
# }
#
# Consult other .template files for guides on how to write specific PVs
#
# The PV_NAME at the end of the INP or OUT field of the record is the 
# PVString defined in ADDRIVERNAMESTANDARD.h.
#
# example: #define ADDRIVERNAMESTANDARD "PV_NAME"
#
##################################################################


record(stringin, "$(P)$(R)ServerURL_RBV"){
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TPX3_SERVER_NAME")
  field(SCAN, "I/O Intr")
}

record(stringin, "$(P)$(R)DetType_RBV"){
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TPX3_DETECTOR_TYPE")
  field(SCAN, "I/O Intr")
}

record(stringin, "$(P)$(R)FwTS_RBV"){
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TPX3_FW_TIMESTAMP")
  field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)FreeSpace_RBV"){
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TPX3_FREE_SPACE")
  field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)WriteSpeed_RBV"){
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TPX3_WRITE_SPEED")
  field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)HttpCode_RBV"){
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TPX3_HTTP_CODE")
  field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)LocalTemp_RBV"){
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TPX3_LOCAL_TEMP")
  field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)FPGATemp_RBV"){
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TPX3_FPGA_TEMP")
  field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)Fan1Speed_RBV"){
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TPX3_FAN1_SPEED")
  field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)Fan2Speed_RBV"){
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TPX3_FAN2_SPEED")
  field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)BiasVoltage_RBV"){
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TPX3_BIAS_VOLT")
  field(SCAN, "I/O Intr")
}

#record(stringin, "$(P)$(R)Chip1Temp_RBV"){
#  field(DTYP, "asynFloat64")
#  field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TPX3_CHIP1_TEMP")
#  field(SCAN, "I/O Intr")
#}

# Arrays of values
record(stringin, "$(P)$(R)ChipTemps_RBV"){
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TPX3_CHIP_TEMPS")
  field(SCAN, "I/O Intr")
}

record(stringin, "$(P)$(R)VDD_RBV"){
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TPX3_VDD")
  field(SCAN, "I/O Intr")
}

record(stringin, "$(P)$(R)AVDD_RBV"){
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TPX3_AVDD")
  field(SCAN, "I/O Intr")
}

# Health scanner
record(bo, "$(P)$(R)Health"){
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TPX3_HEALTH")
  field(SCAN, "1 second")
}